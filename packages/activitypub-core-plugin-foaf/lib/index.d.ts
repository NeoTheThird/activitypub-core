/// <reference types="node" />
import { AP } from 'activitypub-core-types';
import { OutboxPostHandler } from 'activitypub-core-endpoints/lib/outbox';
export declare const foafPlugin: (config: {
    newPerson: JSON;
}) => {
    handleCreateUserActor(this: OutboxPostHandler): void;
    createUserActor(this: {
        activity: AP.Create;
    }): {
        '@context': (string | {
            foaf: string;
        })[];
        object: {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            hash: string;
            host: string;
            hostname: string;
            href: string;
            origin: string;
            password: string;
            pathname: string;
            port: string;
            protocol: string;
            search: string;
            searchParams: import("url").URLSearchParams;
            username: string;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Event">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Note">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Page">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Place">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            accuracy?: number;
            altitude?: number;
            latitude?: number;
            longitude?: number;
            radius?: number;
            units?: string;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Relationship">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            subject?: AP.EntityReference;
            object?: AP.EntityReference | AP.EntityReference[];
            relationship?: AP.CoreObjectReference;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Tombstone">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            formerType?: "CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video" | "Link" | "Mention" | ("CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video" | "Link" | "Mention")[];
            deleted?: Date;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Profile">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            describes?: AP.CoreObjectReference;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Document">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Document"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Video">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Document"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Audio">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Document"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Image">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Application" | "Group" | "Organization" | "Person" | "Service"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Application">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            inbox: AP.OrderedCollectionReference;
            outbox: AP.OrderedCollectionReference;
            following?: AP.CollectionReference;
            followers?: AP.CollectionReference;
            liked?: AP.EitherCollectionReference;
            preferredUsername?: string;
            preferredUsernameMap?: AP.StringReferenceMap;
            streams?: AP.EitherCollectionReference[];
            endpoints?: {
                [key: string]: string | URL;
                proxyUrl?: URL;
                oauthAuthorizationEndpoint?: string;
                oauthTokenEndpoint?: string;
                provideClientKey?: string;
                signClientKey?: string;
                sharedInbox?: URL;
            };
            publicKey?: {
                id: string;
                owner: string;
                publicKeyPem: string;
            };
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Application" | "Group" | "Organization" | "Person" | "Service"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Service">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            inbox: AP.OrderedCollectionReference;
            outbox: AP.OrderedCollectionReference;
            following?: AP.CollectionReference;
            followers?: AP.CollectionReference;
            liked?: AP.EitherCollectionReference;
            preferredUsername?: string;
            preferredUsernameMap?: AP.StringReferenceMap;
            streams?: AP.EitherCollectionReference[];
            endpoints?: {
                [key: string]: string | URL;
                proxyUrl?: URL;
                oauthAuthorizationEndpoint?: string;
                oauthTokenEndpoint?: string;
                provideClientKey?: string;
                signClientKey?: string;
                sharedInbox?: URL;
            };
            publicKey?: {
                id: string;
                owner: string;
                publicKeyPem: string;
            };
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Application" | "Group" | "Organization" | "Person" | "Service"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Group">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            inbox: AP.OrderedCollectionReference;
            outbox: AP.OrderedCollectionReference;
            following?: AP.CollectionReference;
            followers?: AP.CollectionReference;
            liked?: AP.EitherCollectionReference;
            preferredUsername?: string;
            preferredUsernameMap?: AP.StringReferenceMap;
            streams?: AP.EitherCollectionReference[];
            endpoints?: {
                [key: string]: string | URL;
                proxyUrl?: URL;
                oauthAuthorizationEndpoint?: string;
                oauthTokenEndpoint?: string;
                provideClientKey?: string;
                signClientKey?: string;
                sharedInbox?: URL;
            };
            publicKey?: {
                id: string;
                owner: string;
                publicKeyPem: string;
            };
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Application" | "Group" | "Organization" | "Person" | "Service"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Organization">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            inbox: AP.OrderedCollectionReference;
            outbox: AP.OrderedCollectionReference;
            following?: AP.CollectionReference;
            followers?: AP.CollectionReference;
            liked?: AP.EitherCollectionReference;
            preferredUsername?: string;
            preferredUsernameMap?: AP.StringReferenceMap;
            streams?: AP.EitherCollectionReference[];
            endpoints?: {
                [key: string]: string | URL;
                proxyUrl?: URL;
                oauthAuthorizationEndpoint?: string;
                oauthTokenEndpoint?: string;
                provideClientKey?: string;
                signClientKey?: string;
                sharedInbox?: URL;
            };
            publicKey?: {
                id: string;
                owner: string;
                publicKeyPem: string;
            };
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Application" | "Group" | "Organization" | "Person" | "Service"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Person">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            inbox: AP.OrderedCollectionReference;
            outbox: AP.OrderedCollectionReference;
            following?: AP.CollectionReference;
            followers?: AP.CollectionReference;
            liked?: AP.EitherCollectionReference;
            preferredUsername?: string;
            preferredUsernameMap?: AP.StringReferenceMap;
            streams?: AP.EitherCollectionReference[];
            endpoints?: {
                [key: string]: string | URL;
                proxyUrl?: URL;
                oauthAuthorizationEndpoint?: string;
                oauthTokenEndpoint?: string;
                provideClientKey?: string;
                signClientKey?: string;
                sharedInbox?: URL;
            };
            publicKey?: {
                id: string;
                owner: string;
                publicKeyPem: string;
            };
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Create">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Accept">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Follow">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Delete">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: (import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View">) & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Add">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Offer">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Like">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Leave">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Ignore">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Join">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Reject">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Offer"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Invite">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Reject"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"TentativeReject">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Accept"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"TentativeAccept">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"View">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & "Update";
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Undo">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Remove">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Read">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Listen">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Move">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: (import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View">) & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Travel">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Announce">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Ignore"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Block">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Flag">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Dislike">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            object?: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: (import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View">) & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Question">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            actor: AP.EntityReference | AP.EntityReference[];
            target?: AP.EntityReference | AP.EntityReference[];
            result?: AP.EntityReference | AP.EntityReference[];
            origin?: AP.EntityReference | AP.EntityReference[];
            instrument?: AP.EntityReference | AP.EntityReference[];
            oneOf: AP.EntityReference | AP.EntityReference[];
            anyOf: AP.EntityReference | AP.EntityReference[];
            closed: boolean | AP.EntityReference | Date;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Collection">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            totalItems?: number;
            items?: AP.EntityReference | AP.EntityReference[];
            current?: URL | AP.CollectionPage | AP.Link;
            first?: URL | AP.CollectionPage | AP.Link;
            last?: URL | AP.CollectionPage | AP.Link;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"OrderedCollection">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            totalItems?: number;
            items?: AP.EntityReference | AP.EntityReference[];
            current?: URL | AP.CollectionPage | AP.Link;
            first?: URL | AP.CollectionPage | AP.Link;
            last?: URL | AP.CollectionPage | AP.Link;
            orderedItems?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            totalItems?: number;
            items?: AP.EntityReference | AP.EntityReference[];
            current?: URL | AP.CollectionPage | AP.Link;
            first?: URL | AP.CollectionPage | AP.Link;
            last?: URL | AP.CollectionPage | AP.Link;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"OrderedCollectionPage">;
            attachment?: AP.EntityReference | AP.EntityReference[];
            attributedTo?: AP.EntityReference | AP.EntityReference[];
            audience?: AP.EntityReference | AP.EntityReference[];
            bcc?: AP.EntityReference | AP.EntityReference[];
            bto?: AP.EntityReference | AP.EntityReference[];
            cc?: AP.EntityReference | AP.EntityReference[];
            content?: string;
            contentMap?: AP.StringReferenceMap;
            context?: AP.EntityReference | AP.EntityReference[];
            duration?: string;
            endTime?: Date;
            generator?: AP.EntityReference | AP.EntityReference[];
            icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
            inReplyTo?: AP.EntityReference | AP.EntityReference[];
            location?: AP.EntityReference | AP.EntityReference[];
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            published?: Date;
            replies?: AP.CollectionReference;
            startTime?: Date;
            summary?: string;
            summaryMap?: AP.StringReferenceMap;
            tag?: AP.EntityReference | AP.EntityReference[];
            to?: AP.EntityReference | AP.EntityReference[];
            updated?: Date;
            url?: AP.LinkReference | AP.LinkReference[];
            likes?: AP.OrderedCollectionReference;
            shares?: AP.OrderedCollectionReference;
            source?: {
                content?: string;
                contentMap?: AP.StringReferenceMap;
            };
            '@context'?: unknown;
            id?: URL;
            totalItems?: number;
            items?: AP.EntityReference | AP.EntityReference[];
            current?: URL | AP.CollectionPage | AP.Link;
            first?: URL | AP.CollectionPage | AP.Link;
            last?: URL | AP.CollectionPage | AP.Link;
            startIndex?: number;
            orderedItems?: AP.EntityReference | AP.EntityReference[];
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Link" | "Mention">;
            height?: number;
            href?: URL;
            hrefLang?: string;
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            rel?: string | string[];
            width?: number;
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            type: "Mention";
            height?: number;
            href?: URL;
            hrefLang?: string;
            mediaType?: string;
            name?: string;
            nameMap?: AP.StringReferenceMap;
            preview?: AP.EntityReference | AP.EntityReference[];
            rel?: string | string[];
            width?: number;
            '@context'?: unknown;
            id?: URL;
        } | {
            parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
            stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
            stringify(value: any, replacer?: (string | number)[], space?: string | number): string;
            [Symbol.toStringTag]: string;
            length: number;
            toString(): string;
            toLocaleString(): string;
            pop(): AP.EntityReference;
            push(...items: AP.EntityReference[]): number;
            concat(...items: ConcatArray<AP.EntityReference>[]): AP.EntityReference[];
            concat(...items: (AP.EntityReference | ConcatArray<AP.EntityReference>)[]): AP.EntityReference[];
            join(separator?: string): string;
            reverse(): AP.EntityReference[];
            shift(): AP.EntityReference;
            slice(start?: number, end?: number): AP.EntityReference[];
            sort(compareFn?: (a: AP.EntityReference, b: AP.EntityReference) => number): AP.EntityReference[];
            splice(start: number, deleteCount?: number): AP.EntityReference[];
            splice(start: number, deleteCount: number, ...items: AP.EntityReference[]): AP.EntityReference[];
            unshift(...items: AP.EntityReference[]): number;
            indexOf(searchElement: AP.EntityReference, fromIndex?: number): number;
            lastIndexOf(searchElement: AP.EntityReference, fromIndex?: number): number;
            every<S extends AP.EntityReference>(predicate: (value: AP.EntityReference, index: number, array: AP.EntityReference[]) => value is S, thisArg?: any): this is S[];
            every(predicate: (value: AP.EntityReference, index: number, array: AP.EntityReference[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: AP.EntityReference, index: number, array: AP.EntityReference[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: AP.EntityReference, index: number, array: AP.EntityReference[]) => void, thisArg?: any): void;
            map<U>(callbackfn: (value: AP.EntityReference, index: number, array: AP.EntityReference[]) => U, thisArg?: any): U[];
            filter<S_1 extends AP.EntityReference>(predicate: (value: AP.EntityReference, index: number, array: AP.EntityReference[]) => value is S_1, thisArg?: any): S_1[];
            filter(predicate: (value: AP.EntityReference, index: number, array: AP.EntityReference[]) => unknown, thisArg?: any): AP.EntityReference[];
            reduce(callbackfn: (previousValue: AP.EntityReference, currentValue: AP.EntityReference, currentIndex: number, array: AP.EntityReference[]) => AP.EntityReference): AP.EntityReference;
            reduce(callbackfn: (previousValue: AP.EntityReference, currentValue: AP.EntityReference, currentIndex: number, array: AP.EntityReference[]) => AP.EntityReference, initialValue: AP.EntityReference): AP.EntityReference;
            reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: AP.EntityReference, currentIndex: number, array: AP.EntityReference[]) => U_1, initialValue: U_1): U_1;
            reduceRight(callbackfn: (previousValue: AP.EntityReference, currentValue: AP.EntityReference, currentIndex: number, array: AP.EntityReference[]) => AP.EntityReference): AP.EntityReference;
            reduceRight(callbackfn: (previousValue: AP.EntityReference, currentValue: AP.EntityReference, currentIndex: number, array: AP.EntityReference[]) => AP.EntityReference, initialValue: AP.EntityReference): AP.EntityReference;
            reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: AP.EntityReference, currentIndex: number, array: AP.EntityReference[]) => U_2, initialValue: U_2): U_2;
            find<S_2 extends AP.EntityReference>(predicate: (this: void, value: AP.EntityReference, index: number, obj: AP.EntityReference[]) => value is S_2, thisArg?: any): S_2;
            find(predicate: (value: AP.EntityReference, index: number, obj: AP.EntityReference[]) => unknown, thisArg?: any): AP.EntityReference;
            findIndex(predicate: (value: AP.EntityReference, index: number, obj: AP.EntityReference[]) => unknown, thisArg?: any): number;
            fill(value: AP.EntityReference, start?: number, end?: number): AP.EntityReference[];
            copyWithin(target: number, start: number, end?: number): AP.EntityReference[];
            entries(): IterableIterator<[number, AP.EntityReference]>;
            keys(): IterableIterator<number>;
            values(): IterableIterator<AP.EntityReference>;
            includes(searchElement: AP.EntityReference, fromIndex?: number): boolean;
            flatMap<U_3, This = undefined>(callback: (this: This, value: AP.EntityReference, index: number, array: AP.EntityReference[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
            flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
            at(index: number): AP.EntityReference;
            [Symbol.iterator](): IterableIterator<AP.EntityReference>;
            [Symbol.unscopables](): {
                copyWithin: boolean;
                entries: boolean;
                fill: boolean;
                find: boolean;
                findIndex: boolean;
                keys: boolean;
                values: boolean;
            };
        };
        type: import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"CollectionPage" | "OrderedCollectionPage" | "Collection" | "OrderedCollection" | "Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View" | "Application" | "Group" | "Organization" | "Person" | "Service" | "Article" | "Audio" | "Document" | "Event" | "Image" | "Note" | "Page" | "Place" | "Profile" | "Relationship" | "Tombstone" | "Video"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Arrive" | "Travel" | "Question" | "Accept" | "Add" | "Announce" | "Block" | "Ignore" | "Create" | "Delete" | "Dislike" | "Flag" | "Follow" | "Invite" | "Join" | "Leave" | "Like" | "Listen" | "Move" | "Offer" | "Read" | "Reject" | "Remove" | "TentativeAccept" | "TentativeReject" | "Undo" | "Update" | "View"> & import("activitypub-core-types/lib/activitypub/Core/Entity").TypeOrArrayWithType<"Create">;
        attachment?: AP.EntityReference | AP.EntityReference[];
        attributedTo?: AP.EntityReference | AP.EntityReference[];
        audience?: AP.EntityReference | AP.EntityReference[];
        bcc?: AP.EntityReference | AP.EntityReference[];
        bto?: AP.EntityReference | AP.EntityReference[];
        cc?: AP.EntityReference | AP.EntityReference[];
        content?: string;
        contentMap?: AP.StringReferenceMap;
        context?: AP.EntityReference | AP.EntityReference[];
        duration?: string;
        endTime?: Date;
        generator?: AP.EntityReference | AP.EntityReference[];
        icon?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
        image?: URL | AP.Image | import("activitypub-core-types/lib/activitypub/Core/Link").BaseLink | import("activitypub-core-types/lib/activitypub/Core").Mention | import("activitypub-core-types/lib/activitypub/Extended/ExtendedObject").ImageReference[] | AP.LinkReference[];
        inReplyTo?: AP.EntityReference | AP.EntityReference[];
        location?: AP.EntityReference | AP.EntityReference[];
        mediaType?: string;
        name?: string;
        nameMap?: AP.StringReferenceMap;
        preview?: AP.EntityReference | AP.EntityReference[];
        published?: Date;
        replies?: AP.CollectionReference;
        startTime?: Date;
        summary?: string;
        summaryMap?: AP.StringReferenceMap;
        tag?: AP.EntityReference | AP.EntityReference[];
        to?: AP.EntityReference | AP.EntityReference[];
        updated?: Date;
        url?: AP.LinkReference | AP.LinkReference[];
        likes?: AP.OrderedCollectionReference;
        shares?: AP.OrderedCollectionReference;
        source?: {
            content?: string;
            contentMap?: AP.StringReferenceMap;
        };
        id?: URL;
        actor: AP.EntityReference | AP.EntityReference[];
        target?: AP.EntityReference | AP.EntityReference[];
        result?: AP.EntityReference | AP.EntityReference[];
        origin?: AP.EntityReference | AP.EntityReference[];
        instrument?: AP.EntityReference | AP.EntityReference[];
    };
};
