<!doctype html>
<html>
    <head>
        <style>
            * {
                box-sizing: border-box;
                font: inherit;
                line-height: inherit;
            }
            :focus {
                outline: 2px solid blue;
                outline-offset: 2px;
            }
            body {
                margin: 0;
                font-family: monospace;
                font-size: 18px;
                font-family: sans-serif;
                background: #333333;
            }
            main {
                padding: 20px 40px;
                background: #f3f3f3;
                width: 100%;
            }
        </style>
    </head>
    <body>
        <main>
            <h1>
                Connect to the federated web.
            </h1>
            <form novalidate id="signup" action="/user">
              <label>
                <span>Email</span>
                <input required type="text" name="email" />
              </label>
              <label>
                <span>Password</span>
                <input required type="password" name="password" />
              </label>
              <label>
                <span>Name</span>
                <input required type="text" name="name" />
              </label>
              <label>
                <span>Username</span>
                <input required type="text" name="preferredUsername" />
              </label>
              <button type="submit">
                Sign Up
              </button>
            </form>
        </main>
        <script type="module">
          import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.11.0/firebase-app.js'
          import { signInWithEmailAndPassword, getAuth } from 'https://www.gstatic.com/firebasejs/9.11.0/firebase-auth.js'
  
          const formElement = window.document.querySelector('#signup');
          formElement.addEventListener('submit', (event) => {
            event.preventDefault();

            let formElements = [];

            for (const element of [...formElement.elements]) {
              if (element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement) {
                formElements.push(element);
              }
            }

            const isValid = formElements.find(element => element.checkValidity());

            if (!isValid) {
              return;
            }

            const body = Object.fromEntries(formElements.map(formElement => [
              formElement.getAttribute('name'),
              formElement.value
            ]));

            fetch(formElement.action, {
              method: 'POST',
              body: JSON.stringify(body)
            })
              .then(response => response.json())
              .then(({ error, success }) => {
                if (error || !success) {
                  throw new Error(error);
                }
                console.log({
                  success
                })

                initializeApp({
                  projectId: "socialweb-id",
                  apiKey: "AIzaSyAqxakBaICHBJWAxfqJ3WmIoRY8LTnuwt0",
                });

                signInWithEmailAndPassword(getAuth(), body.email, body.password).then(userCredential => {
                  userCredential.user.getIdToken().then(token => {
                    console.log({
                      token
                    })
                    window.document.cookie = `__session=${token}`;
                    window.location.href = '/home';
                  })
                });
            });
          });
        </script>
    </body>
</html>